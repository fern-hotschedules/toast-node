/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const Check: core.serialization.ObjectSchema<serializers.orders.Check.Raw, HotschedulesToast.orders.Check> =
    core.serialization
        .object({
            createdDate: core.serialization.string().optional(),
            openedDate: core.serialization.string().optional(),
            closedDate: core.serialization.string().optional(),
            modifiedDate: core.serialization.string().optional(),
            deletedDate: core.serialization.string().optional(),
            deleted: core.serialization.boolean().optional(),
            selections: core.serialization.list(
                core.serialization.lazyObject(async () => (await import("../../../../..")).orders.Selection)
            ),
            customer: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.Customer)
                .optional(),
            appliedLoyaltyInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.AppliedLoyaltyInfo)
                .optional(),
            taxExempt: core.serialization.boolean().optional(),
            displayNumber: core.serialization.string().optional(),
            appliedServiceCharges: core.serialization
                .list(
                    core.serialization.lazyObject(
                        async () => (await import("../../../../..")).orders.AppliedServiceCharge
                    )
                )
                .optional(),
            amount: core.serialization.number().optional(),
            netAmount: core.serialization.number().optional(),
            taxAmount: core.serialization.number().optional(),
            tipAmount: core.serialization.number().optional(),
            totalAmount: core.serialization.number().optional(),
            totalDiscountAmount: core.serialization.number().optional(),
            payments: core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.Payment))
                .optional(),
            tabName: core.serialization.string().optional(),
            paymentStatus: core.serialization
                .lazy(async () => (await import("../../../../..")).orders.CheckPaymentStatus)
                .optional(),
            appliedDiscounts: core.serialization
                .list(
                    core.serialization.lazyObject(async () => (await import("../../../../..")).orders.AppliedDiscount)
                )
                .optional(),
            voided: core.serialization.boolean().optional(),
            voidDate: core.serialization.string().optional(),
            voidBusinessDate: core.serialization.number().optional(),
            paidDate: core.serialization.string().optional(),
            pickedUpDate: core.serialization.string().optional(),
            createdDevice: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.Device)
                .optional(),
            lastModifiedDevice: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.Device)
                .optional(),
            appliedPreauthInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.AppliedPreauthInfo)
                .optional(),
            shift: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            driverShift: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            removedSelections: core.serialization
                .list(
                    core.serialization.lazyObject(async () => (await import("../../../../..")).orders.RemovedSelection)
                )
                .optional(),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.ExternalReference));

export declare namespace Check {
    interface Raw extends serializers.orders.ExternalReference.Raw {
        createdDate?: string | null;
        openedDate?: string | null;
        closedDate?: string | null;
        modifiedDate?: string | null;
        deletedDate?: string | null;
        deleted?: boolean | null;
        selections: serializers.orders.Selection.Raw[];
        customer?: serializers.orders.Customer.Raw | null;
        appliedLoyaltyInfo?: serializers.orders.AppliedLoyaltyInfo.Raw | null;
        taxExempt?: boolean | null;
        displayNumber?: string | null;
        appliedServiceCharges?: serializers.orders.AppliedServiceCharge.Raw[] | null;
        amount?: number | null;
        netAmount?: number | null;
        taxAmount?: number | null;
        tipAmount?: number | null;
        totalAmount?: number | null;
        totalDiscountAmount?: number | null;
        payments?: serializers.orders.Payment.Raw[] | null;
        tabName?: string | null;
        paymentStatus?: serializers.orders.CheckPaymentStatus.Raw | null;
        appliedDiscounts?: serializers.orders.AppliedDiscount.Raw[] | null;
        voided?: boolean | null;
        voidDate?: string | null;
        voidBusinessDate?: number | null;
        paidDate?: string | null;
        pickedUpDate?: string | null;
        createdDevice?: serializers.orders.Device.Raw | null;
        lastModifiedDevice?: serializers.orders.Device.Raw | null;
        appliedPreauthInfo?: serializers.orders.AppliedPreauthInfo.Raw | null;
        shift?: serializers.orders.ExternalReference.Raw | null;
        driverShift?: serializers.orders.ExternalReference.Raw | null;
        removedSelections?: serializers.orders.RemovedSelection.Raw[] | null;
    }
}

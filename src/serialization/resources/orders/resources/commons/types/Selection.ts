/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const Selection: core.serialization.ObjectSchema<
    serializers.orders.Selection.Raw,
    HotschedulesToast.orders.Selection
> = core.serialization
    .object({
        item: core.serialization.lazyObject(async () => (await import("../../../../..")).orders.ConfigReference),
        itemGroup: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ConfigReference)
            .optional(),
        optionGroup: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ConfigReference)
            .optional(),
        preModifier: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        quantity: core.serialization.number(),
        seatNumber: core.serialization.number().optional(),
        unitOfMeasure: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.UnitofMeasureType)
            .optional(),
        selectionType: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.SelectionType)
            .optional(),
        salesCategory: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        appliedDiscounts: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.AppliedDiscount))
            .optional(),
        deferred: core.serialization.boolean().optional(),
        preDiscountPrice: core.serialization.number().optional(),
        price: core.serialization.number().optional(),
        tax: core.serialization.number().optional(),
        voided: core.serialization.boolean().optional(),
        voidDate: core.serialization.string().optional(),
        voidBusinessDate: core.serialization.number().optional(),
        voidReason: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        refundDetails: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.RefundDetails)
            .optional(),
        displayName: core.serialization.string().optional(),
        createdDate: core.serialization.string().optional(),
        modifiedDate: core.serialization.string().optional(),
        modifiers: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.Selection))
            .optional(),
        fulfillmentStatus: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.FulfillmentStatus)
            .optional(),
        taxInclusion: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.TaxInclusionType)
            .optional(),
        appliedTaxes: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.AppliedTaxRate))
            .optional(),
        diningOption: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        openPriceAmount: core.serialization.number().optional(),
        receiptLinePrice: core.serialization.number().optional(),
        optionGroupPricingMode: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.OptionGroupPricingModeType)
            .optional(),
        externalPriceAmount: core.serialization.number().optional(),
        toastGiftCard: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ToastReference)
            .optional(),
        storedValueTransactionId: core.serialization.number().optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.ExternalReference));

export declare namespace Selection {
    interface Raw extends serializers.orders.ExternalReference.Raw {
        item: serializers.orders.ConfigReference.Raw;
        itemGroup?: serializers.orders.ConfigReference.Raw | null;
        optionGroup?: serializers.orders.ConfigReference.Raw | null;
        preModifier?: serializers.orders.ExternalReference.Raw | null;
        quantity: number;
        seatNumber?: number | null;
        unitOfMeasure?: serializers.orders.UnitofMeasureType.Raw | null;
        selectionType?: serializers.orders.SelectionType.Raw | null;
        salesCategory?: serializers.orders.ExternalReference.Raw | null;
        appliedDiscounts?: serializers.orders.AppliedDiscount.Raw[] | null;
        deferred?: boolean | null;
        preDiscountPrice?: number | null;
        price?: number | null;
        tax?: number | null;
        voided?: boolean | null;
        voidDate?: string | null;
        voidBusinessDate?: number | null;
        voidReason?: serializers.orders.ExternalReference.Raw | null;
        refundDetails?: serializers.orders.RefundDetails.Raw | null;
        displayName?: string | null;
        createdDate?: string | null;
        modifiedDate?: string | null;
        modifiers?: serializers.orders.Selection.Raw[] | null;
        fulfillmentStatus?: serializers.orders.FulfillmentStatus.Raw | null;
        taxInclusion?: serializers.orders.TaxInclusionType.Raw | null;
        appliedTaxes?: serializers.orders.AppliedTaxRate.Raw[] | null;
        diningOption?: serializers.orders.ExternalReference.Raw | null;
        openPriceAmount?: number | null;
        receiptLinePrice?: number | null;
        optionGroupPricingMode?: serializers.orders.OptionGroupPricingModeType.Raw | null;
        externalPriceAmount?: number | null;
        toastGiftCard?: serializers.orders.ToastReference.Raw | null;
        storedValueTransactionId?: number | null;
    }
}

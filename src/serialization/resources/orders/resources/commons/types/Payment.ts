/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const Payment: core.serialization.ObjectSchema<
    serializers.orders.Payment.Raw,
    HotschedulesToast.orders.Payment
> = core.serialization
    .object({
        paidDate: core.serialization.string().optional(),
        paidBusinessDate: core.serialization.number().optional(),
        type: core.serialization.lazy(async () => (await import("../../../../..")).orders.PaymentPropertiesType),
        cardEntryMode: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.CardEntryModeType)
            .optional(),
        amount: core.serialization.number(),
        tipAmount: core.serialization.number(),
        amountTendered: core.serialization.number().optional(),
        cardType: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.CreditCardType)
            .optional(),
        last4Digits: core.serialization.string().optional(),
        originalProcessingFee: core.serialization.number().optional(),
        server: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        referenceCode: core.serialization.string().optional(),
        cashDrawer: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        refundStatus: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.RefundStatusType)
            .optional(),
        refund: core.serialization.lazyObject(async () => (await import("../../../../..")).orders.Refund).optional(),
        paymentStatus: core.serialization
            .lazy(async () => (await import("../../../../..")).orders.CreditPaymentStatus)
            .optional(),
        voidInfo: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.VoidInformation)
            .optional(),
        houseAccount: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        otherPayment: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        createdDevice: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.Device)
            .optional(),
        lastModifiedDevice: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.Device)
            .optional(),
        mcaRepaymentAmount: core.serialization.number().optional(),
        cardPaymentId: core.serialization.string().optional(),
        paymentCardToken: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ToastReference)
            .optional(),
        giftCard: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        giftCardInfo: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.GiftCardInfo)
            .optional(),
        orderGuid: core.serialization.string().optional(),
        checkGuid: core.serialization.string().optional(),
        receiptToken: core.serialization.string().optional(),
        cardHolderFirstName: core.serialization.string().optional(),
        cardHolderLastName: core.serialization.string().optional(),
        isProcessedOffline: core.serialization.boolean().optional(),
        processingService: core.serialization.string().optional(),
        authorizedAmount: core.serialization.number().optional(),
        cardTenderType: core.serialization.string().optional(),
        prepaidCardBalance: core.serialization.number().optional(),
        proRatedDiscountAmount: core.serialization.number().optional(),
        proRatedTaxAmount: core.serialization.number().optional(),
        proRatedTotalServiceChargeAmount: core.serialization.number().optional(),
        shift: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        serverShift: core.serialization
            .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
            .optional(),
        orderOwnerGuid: core.serialization.string().optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.ExternalReference));

export declare namespace Payment {
    interface Raw extends serializers.orders.ExternalReference.Raw {
        paidDate?: string | null;
        paidBusinessDate?: number | null;
        type: serializers.orders.PaymentPropertiesType.Raw;
        cardEntryMode?: serializers.orders.CardEntryModeType.Raw | null;
        amount: number;
        tipAmount: number;
        amountTendered?: number | null;
        cardType?: serializers.orders.CreditCardType.Raw | null;
        last4Digits?: string | null;
        originalProcessingFee?: number | null;
        server?: serializers.orders.ExternalReference.Raw | null;
        referenceCode?: string | null;
        cashDrawer?: serializers.orders.ExternalReference.Raw | null;
        refundStatus?: serializers.orders.RefundStatusType.Raw | null;
        refund?: serializers.orders.Refund.Raw | null;
        paymentStatus?: serializers.orders.CreditPaymentStatus.Raw | null;
        voidInfo?: serializers.orders.VoidInformation.Raw | null;
        houseAccount?: serializers.orders.ExternalReference.Raw | null;
        otherPayment?: serializers.orders.ExternalReference.Raw | null;
        createdDevice?: serializers.orders.Device.Raw | null;
        lastModifiedDevice?: serializers.orders.Device.Raw | null;
        mcaRepaymentAmount?: number | null;
        cardPaymentId?: string | null;
        paymentCardToken?: serializers.orders.ToastReference.Raw | null;
        giftCard?: serializers.orders.ExternalReference.Raw | null;
        giftCardInfo?: serializers.orders.GiftCardInfo.Raw | null;
        orderGuid?: string | null;
        checkGuid?: string | null;
        receiptToken?: string | null;
        cardHolderFirstName?: string | null;
        cardHolderLastName?: string | null;
        isProcessedOffline?: boolean | null;
        processingService?: string | null;
        authorizedAmount?: number | null;
        cardTenderType?: string | null;
        prepaidCardBalance?: number | null;
        proRatedDiscountAmount?: number | null;
        proRatedTaxAmount?: number | null;
        proRatedTotalServiceChargeAmount?: number | null;
        shift?: serializers.orders.ExternalReference.Raw | null;
        serverShift?: serializers.orders.ExternalReference.Raw | null;
        orderOwnerGuid?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const Order: core.serialization.ObjectSchema<serializers.orders.Order.Raw, HotschedulesToast.orders.Order> =
    core.serialization
        .object({
            openedDate: core.serialization.string().optional(),
            modifiedDate: core.serialization.string().optional(),
            promisedDate: core.serialization.string().optional(),
            channelGuid: core.serialization.string().optional(),
            diningOption: core.serialization.lazyObject(
                async () => (await import("../../../../..")).orders.ExternalReference
            ),
            checks: core.serialization.list(
                core.serialization.lazyObject(async () => (await import("../../../../..")).orders.Check)
            ),
            table: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            serviceArea: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            restaurantService: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            revenueCenter: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            source: core.serialization.string().optional(),
            duration: core.serialization.number().optional(),
            deliveryInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.DeliveryInfo)
                .optional(),
            requiredPrepTime: core.serialization.string().optional(),
            estimatedFulfillmentDate: core.serialization.string().optional(),
            numberOfGuests: core.serialization.number().optional(),
            voided: core.serialization.boolean().optional(),
            voidDate: core.serialization.string().optional(),
            voidBusinessDate: core.serialization.number().optional(),
            paidDate: core.serialization.string().optional(),
            closedDate: core.serialization.string().optional(),
            deletedDate: core.serialization.string().optional(),
            deleted: core.serialization.boolean().optional(),
            businessDate: core.serialization.number().optional(),
            server: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            owner: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.ExternalReference)
                .optional(),
            pricingFeatures: core.serialization
                .list(core.serialization.lazy(async () => (await import("../../../../..")).orders.PricingFeaturesType))
                .optional(),
            approvalStatus: core.serialization
                .lazy(async () => (await import("../../../../..")).orders.ApprovalStatusType)
                .optional(),
            guestOrderStatus: core.serialization.string().optional(),
            createdDevice: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.Device)
                .optional(),
            createdDate: core.serialization.string().optional(),
            initialDate: core.serialization.number().optional(),
            lastModifiedDevice: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.Device)
                .optional(),
            curbsidePickupInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.CurbsidePickupInfo)
                .optional(),
            deliveryServiceInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.DeliveryServiceInfo)
                .optional(),
            marketplaceFacilitatorTaxInfo: core.serialization
                .lazyObject(async () => (await import("../../../../..")).orders.MarketplaceFacilitatorTaxInfo)
                .optional(),
            createdInTestMode: core.serialization.boolean().optional(),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).orders.ExternalReference));

export declare namespace Order {
    interface Raw extends serializers.orders.ExternalReference.Raw {
        openedDate?: string | null;
        modifiedDate?: string | null;
        promisedDate?: string | null;
        channelGuid?: string | null;
        diningOption: serializers.orders.ExternalReference.Raw;
        checks: serializers.orders.Check.Raw[];
        table?: serializers.orders.ExternalReference.Raw | null;
        serviceArea?: serializers.orders.ExternalReference.Raw | null;
        restaurantService?: serializers.orders.ExternalReference.Raw | null;
        revenueCenter?: serializers.orders.ExternalReference.Raw | null;
        source?: string | null;
        duration?: number | null;
        deliveryInfo?: serializers.orders.DeliveryInfo.Raw | null;
        requiredPrepTime?: string | null;
        estimatedFulfillmentDate?: string | null;
        numberOfGuests?: number | null;
        voided?: boolean | null;
        voidDate?: string | null;
        voidBusinessDate?: number | null;
        paidDate?: string | null;
        closedDate?: string | null;
        deletedDate?: string | null;
        deleted?: boolean | null;
        businessDate?: number | null;
        server?: serializers.orders.ExternalReference.Raw | null;
        owner?: serializers.orders.ExternalReference.Raw | null;
        pricingFeatures?: serializers.orders.PricingFeaturesType.Raw[] | null;
        approvalStatus?: serializers.orders.ApprovalStatusType.Raw | null;
        guestOrderStatus?: string | null;
        createdDevice?: serializers.orders.Device.Raw | null;
        createdDate?: string | null;
        initialDate?: number | null;
        lastModifiedDevice?: serializers.orders.Device.Raw | null;
        curbsidePickupInfo?: serializers.orders.CurbsidePickupInfo.Raw | null;
        deliveryServiceInfo?: serializers.orders.DeliveryServiceInfo.Raw | null;
        marketplaceFacilitatorTaxInfo?: serializers.orders.MarketplaceFacilitatorTaxInfo.Raw | null;
        createdInTestMode?: boolean | null;
    }
}

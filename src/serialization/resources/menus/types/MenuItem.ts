/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../core";

export const MenuItem: core.serialization.ObjectSchema<
    serializers.menus.MenuItem.Raw,
    HotschedulesToast.menus.MenuItem
> = core.serialization.object({
    name: core.serialization.string().optional(),
    guid: core.serialization.string().optional(),
    multiLocationId: core.serialization.string().optional(),
    masterId: core.serialization.number().optional(),
    description: core.serialization.string().optional(),
    image: core.serialization.string().optional(),
    visibility: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).menus.MenuEntityVisibility))
        .optional(),
    price: core.serialization.number().optional(),
    pricingStrategy: core.serialization.lazy(async () => (await import("../../..")).menus.PricingStrategy).optional(),
    pricingRules: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).menus.PricingRules))
        .optional(),
    isDeferred: core.serialization.boolean().optional(),
    isDiscountable: core.serialization.boolean().optional(),
    salesCategory: core.serialization.lazyObject(async () => (await import("../../..")).menus.SalesCategory).optional(),
    taxInfo: core.serialization.list(core.serialization.string()).optional(),
    taxInclusion: core.serialization.lazy(async () => (await import("../../..")).menus.TaxInclusionSetting).optional(),
    itemTags: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).menus.ItemTag))
        .optional(),
    plu: core.serialization.string().optional(),
    sku: core.serialization.string().optional(),
    calories: core.serialization.number().optional(),
    contentAdvisories: core.serialization
        .lazyObject(async () => (await import("../../..")).menus.ContentAdvisories)
        .optional(),
    unitOfMeasure: core.serialization.lazy(async () => (await import("../../..")).menus.PriceUnit).optional(),
    portions: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).menus.Portion))
        .optional(),
    prepTime: core.serialization.number().optional(),
    prepStations: core.serialization.list(core.serialization.string()).optional(),
    modifierGroupReferences: core.serialization.list(core.serialization.number()).optional(),
});

export declare namespace MenuItem {
    interface Raw {
        name?: string | null;
        guid?: string | null;
        multiLocationId?: string | null;
        masterId?: number | null;
        description?: string | null;
        image?: string | null;
        visibility?: serializers.menus.MenuEntityVisibility.Raw[] | null;
        price?: number | null;
        pricingStrategy?: serializers.menus.PricingStrategy.Raw | null;
        pricingRules?: serializers.menus.PricingRules.Raw[] | null;
        isDeferred?: boolean | null;
        isDiscountable?: boolean | null;
        salesCategory?: serializers.menus.SalesCategory.Raw | null;
        taxInfo?: string[] | null;
        taxInclusion?: serializers.menus.TaxInclusionSetting.Raw | null;
        itemTags?: serializers.menus.ItemTag.Raw[] | null;
        plu?: string | null;
        sku?: string | null;
        calories?: number | null;
        contentAdvisories?: serializers.menus.ContentAdvisories.Raw | null;
        unitOfMeasure?: serializers.menus.PriceUnit.Raw | null;
        portions?: serializers.menus.Portion.Raw[] | null;
        prepTime?: number | null;
        prepStations?: string[] | null;
        modifierGroupReferences?: number[] | null;
    }
}

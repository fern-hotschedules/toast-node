/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const ServiceCharge: core.serialization.ObjectSchema<
    serializers.config.ServiceCharge.Raw,
    HotschedulesToast.config.ServiceCharge
> = core.serialization
    .object({
        name: core.serialization.string().optional(),
        amountType: core.serialization
            .lazy(async () => (await import("../../../../..")).config.ServiceChargeType)
            .optional(),
        amount: core.serialization.number().optional(),
        percent: core.serialization.number().optional(),
        criteria: core.serialization
            .lazyObject(async () => (await import("../../../../..")).config.ServiceChargeCriteria)
            .optional(),
        gratuity: core.serialization.boolean().optional(),
        taxable: core.serialization.boolean().optional(),
        applicableTaxes: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).config.TaxRate))
            .optional(),
        serviceChargeCalculation: core.serialization
            .lazy(async () => (await import("../../../../..")).config.ServiceChargeCalculation)
            .optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).config.ExternalReference));

export declare namespace ServiceCharge {
    interface Raw extends serializers.config.ExternalReference.Raw {
        name?: string | null;
        amountType?: serializers.config.ServiceChargeType.Raw | null;
        amount?: number | null;
        percent?: number | null;
        criteria?: serializers.config.ServiceChargeCriteria.Raw | null;
        gratuity?: boolean | null;
        taxable?: boolean | null;
        applicableTaxes?: serializers.config.TaxRate.Raw[] | null;
        serviceChargeCalculation?: serializers.config.ServiceChargeCalculation.Raw | null;
    }
}

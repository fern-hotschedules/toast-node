/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const TaxRate: core.serialization.ObjectSchema<
    serializers.config.TaxRate.Raw,
    HotschedulesToast.config.TaxRate
> = core.serialization
    .object({
        name: core.serialization.string().optional(),
        isDefault: core.serialization.boolean().optional(),
        rate: core.serialization.number().optional(),
        type: core.serialization.lazy(async () => (await import("../../../../..")).config.TaxRateType).optional(),
        roundingType: core.serialization
            .lazy(async () => (await import("../../../../..")).config.RoundCurrencyMethod)
            .optional(),
        taxTable: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).config.TaxTableRow))
            .optional(),
        conditionalTaxRates: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).config.ConditionalTaxRate))
            .optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).config.ToastReference));

export declare namespace TaxRate {
    interface Raw extends serializers.config.ToastReference.Raw {
        name?: string | null;
        isDefault?: boolean | null;
        rate?: number | null;
        type?: serializers.config.TaxRateType.Raw | null;
        roundingType?: serializers.config.RoundCurrencyMethod.Raw | null;
        taxTable?: serializers.config.TaxTableRow.Raw[] | null;
        conditionalTaxRates?: serializers.config.ConditionalTaxRate.Raw[] | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { HotschedulesToast } from "@fern-api/toast";
import * as core from "../../../../../../core";

export const BreakType: core.serialization.ObjectSchema<
    serializers.config.BreakType.Raw,
    HotschedulesToast.config.BreakType
> = core.serialization
    .object({
        name: core.serialization.string().optional(),
        active: core.serialization.boolean().optional(),
        paid: core.serialization.boolean().optional(),
        duration: core.serialization.number().optional(),
        enforceMinimumTime: core.serialization.boolean().optional(),
        trackMissedBreaks: core.serialization.boolean().optional(),
        breakIntervalHrs: core.serialization.number().optional(),
        breakIntervalMins: core.serialization.number().optional(),
        trackBreakAcknowledgement: core.serialization.boolean().optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../../../..")).config.ToastReference));

export declare namespace BreakType {
    interface Raw extends serializers.config.ToastReference.Raw {
        name?: string | null;
        active?: boolean | null;
        paid?: boolean | null;
        duration?: number | null;
        enforceMinimumTime?: boolean | null;
        trackMissedBreaks?: boolean | null;
        breakIntervalHrs?: number | null;
        breakIntervalMins?: number | null;
        trackBreakAcknowledgement?: boolean | null;
    }
}

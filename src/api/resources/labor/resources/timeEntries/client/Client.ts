/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { HotschedulesToast } from "@fern-api/toast";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace TimeEntries {
    interface Options {
        environment?: environments.HotschedulesToastEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class TimeEntries {
    constructor(private readonly options: TimeEntries.Options) {}

    /**
     * Returns an array of `TimeEntry` objects that contain
     * information about employee shift events. The information
     * includes shift start times, end times, and the start and end
     * times of break periods.
     * *  Include one or more `timeEntryId` query parameters set to
     *    the GUIDs for specific time entries.
     * *  Include both a `startDate` and an `endDate` query parameter
     *    to get time entries for a specific time period.
     * *  Include both a `modifiedStartDate` and a `modifiedEndDate`
     *    query parameter to get the time entries that were modified
     *    during a specific time period.
     * *  Includes a `businessDate` query parameter to get the time
     *    entries with an `inDate` during a specific business date.
     * Valid requests include one or more `timeEntryId` parameters,
     * both a `startDate` and an `endDate`, both a `modifiedStartDate`
     * and a `modifiedEndDate`, or a `businessDate`.
     *
     */
    public async getAll(
        request: HotschedulesToast.labor.GetTimeEntriesRequest
    ): Promise<HotschedulesToast.labor.TimeEntry[]> {
        const {
            startDate,
            endDate,
            modifiedStartDate,
            modifiedEndDate,
            businessDate,
            includeMissedBreaks,
            toastRestaurantExternalId,
        } = request;
        const _queryParams = new URLSearchParams();
        if (startDate != null) {
            _queryParams.append("startDate", startDate);
        }

        if (endDate != null) {
            _queryParams.append("endDate", endDate);
        }

        if (modifiedStartDate != null) {
            _queryParams.append("modifiedStartDate", modifiedStartDate);
        }

        if (modifiedEndDate != null) {
            _queryParams.append("modifiedEndDate", modifiedEndDate);
        }

        if (businessDate != null) {
            _queryParams.append("businessDate", businessDate);
        }

        if (includeMissedBreaks != null) {
            _queryParams.append("includeMissedBreaks", includeMissedBreaks.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                "/timeEntries"
            ),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.labor.timeEntries.getAll.Response.parseOrThrow(
                _response.body as serializers.labor.timeEntries.getAll.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a `TimeEntry` object containing information about one
     * employee shift. The information includes the shift start time,
     * end time, and the start and end times of break periods.
     *
     */
    public async get(
        timeEntryId: string,
        request: HotschedulesToast.labor.GetTimeEntryRequest
    ): Promise<HotschedulesToast.labor.TimeEntry> {
        const { includeMissedBreaks, includeArchived, toastRestaurantExternalId } = request;
        const _queryParams = new URLSearchParams();
        if (includeMissedBreaks != null) {
            _queryParams.append("includeMissedBreaks", includeMissedBreaks.toString());
        }

        if (includeArchived != null) {
            _queryParams.append("includeArchived", includeArchived.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/timeEntries/${timeEntryId}`
            ),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.labor.TimeEntry.parseOrThrow(_response.body as serializers.labor.TimeEntry.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

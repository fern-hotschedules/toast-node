/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HotschedulesToast } from "@fern-api/toast";

/**
 * A `TimeEntry` captures the actual time an employee worked or took
 * a break. Typically, a time entry is one-to-one with a scheduled
 * shift, but it is possible in the Toast platform for an employee
 * to clock-in and clock-out without a shift.
 *
 */
export interface TimeEntry extends HotschedulesToast.labor.ExternalReference {
    /**
     * Date created, in UTC format (read-only).
     *
     */
    createdDate?: string;
    /**
     * Date modified, in UTC format (read-only).
     *
     */
    modifiedDate?: string;
    /**
     * Date deleted, in UTC format (read-only).
     *
     */
    deletedDate?: string;
    /**
     * If the time entry is deleted in the Toast platform.
     *
     */
    deleted?: boolean;
    jobReference?: HotschedulesToast.labor.ExternalReference;
    employeeReference?: HotschedulesToast.labor.ExternalReference;
    shiftReference?: HotschedulesToast.labor.ExternalReference;
    /**
     * The date and time that an employee clocked in to a work
     * shift.
     *
     */
    inDate?: string;
    /**
     * The date and time that an employee closed a work shift.
     * If the employee has not closed the shift this field is
     * null.
     *
     */
    outDate?: string;
    /**
     * Indicates whether the Toast platform automatically clocked the employee out of their shift at the end of the restaurant business day. For more information, see [the Toast platform guide section about automatic clock-out and time entries](https://doc.toasttab.com/doc/platformguide/adminEffectOfAutoclockOutOnBreakEntries.html).
     *
     */
    autoClockedOut?: boolean;
    /**
     * The business date of `inDate`, in the format of
     * "yyyymmdd".
     *
     */
    businessDate?: string;
    /**
     * Regular hours worked by the employee for this time entry,
     * excluding breaks.
     *
     */
    regularHours?: number;
    /**
     * Any overtime hours taken by this employee during this
     * time entry.
     *
     */
    overtimeHours?: number;
    /**
     * Optional, historical `hourlyWage`; that is, the wage in
     * effect when the time entry was made. The current
     * `hourlyWage` for the employee (or job) may be different.
     * This will be null if the job is `SALARY`.
     *
     */
    hourlyWage?: number;
    /**
     * An optional array of time entry breaks, each break
     * defining a clock-in date, clock-out date, and whether or
     * not the break was paid.
     *
     */
    breaks?: HotschedulesToast.labor.TimeEntryBreak[];
    /**
     * The currency amount of tips paid in cash during the time
     * entry. This does not include service charges applied as
     * automatic gratuities. If the employee has not closed the
     * shift, this value is not final and may change. If the
     * `outDate` value is set, the `declaredCashTips` value is
     * final.
     *
     */
    declaredCashTips?: number;
    /**
     * The currency amount of tips paid using non-cash tender
     * during the time entry. For example, this includes credit
     * card tips. This does not include service charges applied
     * as automatic gratuities. If the employee has not closed
     * the shift, this value is not final and may change. If the
     * `outDate` value is set, the `nonCashTips` value is final.
     *
     */
    nonCashTips?: number;
    /**
     * The currency amount of service charges applied as
     * automatic gratuities that were paid in cash during the
     * time entry. If the employee has not closed the shift,
     * this value is not final and may change. If the `outDate`
     * value is set, the `cashGratuityServiceCharges` value is
     * final.
     *
     */
    cashGratuityServiceCharges?: number;
    /**
     * The currency amount of service charges applied as
     * automatic gratuities that were paid using non-cash tender
     * during the time entry. If the employee has not closed the
     * shift, this value is not final and may change. If the
     * `outDate` value is set, the
     * `nonCashGratuityServiceCharges` value is final.
     *
     */
    nonCashGratuityServiceCharges?: number;
    /**
     * The currency amount withheld from the employee's credit
     * card tips during the time entry. The amount withheld is
     * calculated as a percentage of tips added to credit card
     * payments. If the employee has not closed the shift (the
     * `outDate` value is null), the `tipsWithheld` value is not
     * final and may change. If the employee has closed the
     * shift (the `outDate` value is set), the `tipsWithheld`
     * value is final.
     *
     */
    tipsWithheld?: number;
    /**
     * The currency amount of non-cash sales during the time
     * entry. The value includes the order amounts and tax.
     * It does not include tips.
     * If the employee has not closed the shift, this
     * value is `0`. If the `outDate` value is set, then the
     * `nonCashSales` value is final.
     *
     */
    nonCashSales?: number;
    /**
     * The currency amount of sales paid for in cash during the
     * time entry. The value includes the order amounts and tax.
     * It does not include tips.
     * If the employee has not closed the shift,
     * this value is `0`. If the `outDate` value is set,
     * then the `cashSales` value is final.
     *
     */
    cashSales?: number;
}

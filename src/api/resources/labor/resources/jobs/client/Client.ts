/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { HotschedulesToast } from "@fern-api/toast";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Jobs {
    interface Options {
        environment?: environments.HotschedulesToastEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Jobs {
    constructor(private readonly options: Jobs.Options) {}

    /**
     * Returns an array of `Job` objects containing information about
     * the employee jobs configured at a restaurant.
     *
     */
    public async getAll(request: HotschedulesToast.labor.JobsRequest): Promise<HotschedulesToast.labor.Job[]> {
        const { toastRestaurantExternalId } = request;
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.HotschedulesToastEnvironment.Production, "/jobs"),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.labor.jobs.getAll.Response.parseOrThrow(
                _response.body as serializers.labor.jobs.getAll.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a `Job` object containing information about one
     * employee job at a restaurant.
     *
     */
    public async get(jobId: string, request: HotschedulesToast.labor.JobRequest): Promise<HotschedulesToast.labor.Job> {
        const { toastRestaurantExternalId } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/jobs/${jobId}`
            ),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.labor.Job.parseOrThrow(_response.body as serializers.labor.Job.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds or replaces the external identifier for an existing job.
     * Include the string value of the new external identifier in the
     * message body.
     * The Toast platform uses this external identifier as one of the
     * unique, persistent identifiers for a job record. _Changing the
     * external identifier for an existing job might affect reporting
     * and other Toast platform functions that select jobs using the
     * `externalId` value._
     *
     */
    public async updateJobExternalId(
        jobId: string,
        request: HotschedulesToast.labor.AddOrReplaceAnExternalIdentifierRequest
    ): Promise<HotschedulesToast.labor.Job> {
        const { toastRestaurantExternalId, contentType, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/jobs/${jobId}/externalId`
            ),
            method: "PUT",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                "Content-Type": contentType,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.labor.jobs.updateJobExternalId.Request.jsonOrThrow(_body),
        });
        if (_response.ok) {
            return await serializers.labor.Job.parseOrThrow(_response.body as serializers.labor.Job.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds an external identifier for an existing job. Include the
     * string value of the new external identifier in the message
     * body.
     * You cannot change an existing external identifier with another
     * `POST` request. The Toast platform uses this external
     * identifier as one of the unique, persistent identifiers for a
     * job record.
     *
     */
    public async createJobExternalId(
        jobId: string,
        request: HotschedulesToast.labor.AddExternalIdentifierRequest
    ): Promise<HotschedulesToast.labor.Job> {
        const { toastRestaurantExternalId, contentType, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/jobs/${jobId}/externalId`
            ),
            method: "POST",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                "Content-Type": contentType,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.labor.jobs.createJobExternalId.Request.jsonOrThrow(_body),
        });
        if (_response.ok) {
            return await serializers.labor.Job.parseOrThrow(_response.body as serializers.labor.Job.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

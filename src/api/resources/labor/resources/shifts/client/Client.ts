/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { HotschedulesToast } from "@fern-api/toast";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Shifts {
    interface Options {
        environment?: environments.HotschedulesToastEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Shifts {
    constructor(private readonly options: Shifts.Options) {}

    /**
     * Returns an array of `Shift` objects that contain information
     * about schedule shifts for restaurant employees.
     *
     */
    public async getAll(request: HotschedulesToast.labor.ShiftsRequest): Promise<HotschedulesToast.labor.Shift[]> {
        const { shiftIds, startDate, endDate, toastRestaurantExternalId } = request;
        const _queryParams = new URLSearchParams();
        if (shiftIds != null) {
            _queryParams.append("shiftIds", shiftIds);
        }

        if (startDate != null) {
            _queryParams.append("startDate", startDate);
        }

        if (endDate != null) {
            _queryParams.append("endDate", endDate);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.HotschedulesToastEnvironment.Production, "/shifts"),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.labor.shifts.getAll.Response.parseOrThrow(
                _response.body as serializers.labor.shifts.getAll.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a schedule shift for a restaurant employee.
     *
     */
    public async create(request: HotschedulesToast.labor.CreateShiftRequest): Promise<HotschedulesToast.labor.Shift> {
        const { toastRestaurantExternalId, contentType, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.HotschedulesToastEnvironment.Production, "/shifts"),
            method: "POST",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                "Content-Type": contentType,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.labor.shifts.create.Request.jsonOrThrow(_body),
        });
        if (_response.ok) {
            return await serializers.labor.Shift.parseOrThrow(_response.body as serializers.labor.Shift.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a `Shift` object containing of information about one
     * schedule shift for a restaurant employee.
     *
     */
    public async get(
        shiftId: string,
        request: HotschedulesToast.labor.GetShiftRequest
    ): Promise<HotschedulesToast.labor.Shift> {
        const { toastRestaurantExternalId } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/shifts/${shiftId}`
            ),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.labor.Shift.parseOrThrow(_response.body as serializers.labor.Shift.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates an existing schedule shift record for a restaurant
     * employee. A `PUT` request completely replaces the information
     * in the existing record.
     *
     */
    public async update(
        shiftId: string,
        request: HotschedulesToast.labor.UpdateShiftRequest
    ): Promise<HotschedulesToast.labor.Shift> {
        const { toastRestaurantExternalId, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/shifts/${shiftId}`
            ),
            method: "PUT",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.labor.shifts.update.Request.jsonOrThrow(_body),
        });
        if (_response.ok) {
            return await serializers.labor.Shift.parseOrThrow(_response.body as serializers.labor.Shift.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Marks an existing schedule shift record for a restaurant
     * employee as deleted. If the shift record was already deleted,
     * then the operation will succeed (HTTP 200 response code) and no
     * change will be made.
     *
     */
    public async delete(
        shiftId: string,
        request: HotschedulesToast.labor.AShiftRequest
    ): Promise<HotschedulesToast.labor.Shift> {
        const { toastRestaurantExternalId } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `/shifts/${shiftId}`
            ),
            method: "DELETE",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.labor.Shift.parseOrThrow(_response.body as serializers.labor.Shift.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { HotschedulesToast } from "@fern-api/toast";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Payments {
    interface Options {
        environment?: environments.HotschedulesToastEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Payments {
    constructor(private readonly options: Payments.Options) {}

    /**
     * Returns a list of the GUIDs for each payment made during
     * one restaurant business day.
     * The specific hours that make up a business
     * day depend on the business day cutoff in the restaurant configuration,
     * which is available from the restaurants API in the `closeoutHour`
     * property.
     * The business day for a restaurant is based on its local time (not UTC
     * or local time for an API client).
     * You must include one of the
     * `paidBusinessDate`, `refundBusinessDate`, or `voidBusinessDate` query
     * parameters.
     *
     */
    public async getAll(request: HotschedulesToast.orders.GetPaymentIdentifiersRequest): Promise<string[]> {
        const { paidBusinessDate, refundBusinessDate, voidBusinessDate, toastRestaurantExternalId } = request;
        const _queryParams = new URLSearchParams();
        if (paidBusinessDate != null) {
            _queryParams.append("paidBusinessDate", paidBusinessDate);
        }

        if (refundBusinessDate != null) {
            _queryParams.append("refundBusinessDate", refundBusinessDate);
        }

        if (voidBusinessDate != null) {
            _queryParams.append("voidBusinessDate", voidBusinessDate);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.HotschedulesToastEnvironment.Production, "payments"),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.orders.payments.getAll.Response.parseOrThrow(
                _response.body as serializers.orders.payments.getAll.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a JSON `Payment` object containing detailed information about a  single payment, specified by its GUID.
     */
    public async get(
        guid: string,
        request: HotschedulesToast.orders.GetAPaymentRequest
    ): Promise<HotschedulesToast.orders.Payment> {
        const { toastRestaurantExternalId } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `payments/${guid}`
            ),
            method: "GET",
            headers: {
                "Toast-Restaurant-External-ID": toastRestaurantExternalId,
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.orders.Payment.parseOrThrow(_response.body as serializers.orders.Payment.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds one or more payments to a check in an existing order. Include information about the payments in an array of `Payment` objects in the message body. Specify the Toast platform GUID of the order and check in REST path parameters. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiAddingPaymentsToACheck.html"> the _Toast Developer Guide_</a>.
     *
     */
    public async create(
        orderGuid: string,
        checkGuid: string,
        request: HotschedulesToast.orders.Payment[]
    ): Promise<HotschedulesToast.orders.Order> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `orders/${orderGuid}/checks/${checkGuid}/payments`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.orders.payments.create.Request.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.orders.Order.parseOrThrow(_response.body as serializers.orders.Order.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the tip amount in an existing payment for a check in an order. Include the new `tipAmount` value in a `Payment` object in the message body. This endpoint does not allow any other `Payment` object value for a `PATCH` request. Specify the Toast platform GUID of the order, check, and payment in REST path parameters. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiUpdatingTipsInAPayment.html"> the _Toast Developer Guide_</a>.
     *
     */
    public async update(
        orderGuid: string,
        checkGuid: string,
        paymentGuid: string,
        request: Record<string, unknown>
    ): Promise<HotschedulesToast.orders.Order> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HotschedulesToastEnvironment.Production,
                `orders/${orderGuid}/checks/${checkGuid}/payments/${paymentGuid}`
            ),
            method: "PATCH",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.orders.payments.update.Request.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.orders.Order.parseOrThrow(_response.body as serializers.orders.Order.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HotschedulesToastError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HotschedulesToastError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HotschedulesToastTimeoutError();
            case "unknown":
                throw new errors.HotschedulesToastError({
                    message: _response.error.errorMessage,
                });
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HotschedulesToast } from "@fern-api/toast";

/**
 * Defines a payment from a customer.
 */
export interface Payment extends HotschedulesToast.orders.ExternalReference {
    /** The date on which the payment was made. */
    paidDate?: string;
    /** The business date (yyyyMMdd) on which this payment was first applied. Response only. */
    paidBusinessDate?: number;
    /**
     * The payment method. When `POST`ing, only `OTHER` and `CREDIT` payment types are supported. For cash payments, you create an external cash payment type in Other Payment Options. All other types are response only. Valid values: * `CASH` - The guest paid in cash. * `CREDIT` - The guest used a credit card. * `GIFTCARD` - The guest used a gift card. * `HOUSE_ACCOUNT` - The guest used funds from their house account. * `REWARDCARD` - The guest used the available balance on a rewards card. * `LEVELUP` - The guest used the LevelUp app. * `OTHER` - The payment type is a custom type configured by the restaurant. * `UNDETERMINED` - The payment type cannot be determined.
     *
     */
    type: HotschedulesToast.orders.PaymentPropertiesType;
    /**
     * Indicates how credit card data was obtained. Response only. Valid values: * `SWIPED` - The credit card was swiped through a card reader. * `KEYED` - The restaurant employee typed the card number into a device. * `ONLINE` - The credit card information was entered online. * `EMV_CHIP_SIGN` - The credit card was inserted into a chip reader. * `TOKENIZED` - The credit card number is tokenized, meaning that it is replaced by a series of randomly generated numbers. The authorizer is able to use the token to authorize the actual credit card. * `PRE_AUTHED` - The credit card was pre-authorized for an initial amount. An example of pre-authorization is swiping a credit card to start a bar tab. The final payment is authorized when the order is complete. * `SAVED_CARD` - The credit card information was retrieved from the guest's account. * `FUTURE_ORDER` - The credit card payment was included on a scheduled order. * `CONTACTLESS` - The guest used a contactless payment option to provide the credit card number. * `APPLE_PAY_CNP` - The guest used the Apple Pay app to make the payment. * `GOOGLE_PAY_CNP` - The guest used the Google Pay app to make the payment. * `INCREMENTAL_PRE_AUTHED` - An additional payment was added to a pre-authorized card. For example, a guest uses a credit card to open a bar tab. As they continue to order more drinks, the pre-authorized amount is updated. The final payment is authorized when the order is complete. * `PARTNER_ECOM_COF` - The restaurant has the credit card on file. * `CLICK_TO_PAY_CNP` - The guest used Click to Pay to make the payment.
     *
     */
    cardEntryMode?: HotschedulesToast.orders.CardEntryModeType;
    /** The amount of this payment, excluding tips. */
    amount: number;
    /** The amount tipped on this payment. */
    tipAmount: number;
    /** The amount tendered for this payment. The amount tendered does not include the tip. */
    amountTendered?: number;
    /** The type of credit card that was used. Response only. */
    cardType?: HotschedulesToast.orders.CreditCardType;
    /** The last 4 digits of the credit card that was used. Response only. */
    last4Digits?: string;
    /** The original processing fee for this payment. Populated after the payment is captured. Response only. */
    originalProcessingFee?: number;
    server?: HotschedulesToast.orders.ExternalReference;
    /** For internal use only. */
    referenceCode?: string;
    cashDrawer?: HotschedulesToast.orders.ExternalReference;
    /**
     * Indicates whether the payment was refunded. Response only.
     * Valid values:
     * * `NONE` - The payment was not refunded.
     * * `PARTIAL` - The payment was partially refunded.
     * * `FULL` - The payment was refunded in full.
     *
     */
    refundStatus?: HotschedulesToast.orders.RefundStatusType;
    refund?: HotschedulesToast.orders.Refund;
    /**
     * The status of this payment when the type is `CREDIT`. Response only. Valid values: * `OPEN` - The payment has not been presented for processing. * `PROCESSING` - The payment is being processed. * `AUTHORIZED_AT_RISK` - This value is no longer used. * `AUTHORIZED` - The payment is approved but not yet captured. The card is valid and the funds are available. * `ERROR` - An error occurred during the payment processing. * `ERROR_NETWORK` - Unable to connect to the payment authorizer. * `DENIED` - The payment request was denied. For example, the provided credit card is over its limit. * `PROCESSING_VOID` - A void request for the payment is being processed. * `VOIDED_AT_RISK` - This value is no longer used. * `CANCELLED` - The payment is canceled. * `CAPTURE_IN_PROGRESS` - The payment is in the process of being captured. * `CAPTURED` - The payment is captured. When the payment is captured, the funds are transferred to the restaurant. * `VOIDED` - The payment is voided.
     *
     */
    paymentStatus?: HotschedulesToast.orders.CreditPaymentStatus;
    voidInfo?: HotschedulesToast.orders.VoidInformation;
    houseAccount?: HotschedulesToast.orders.ExternalReference;
    otherPayment?: HotschedulesToast.orders.ExternalReference;
    createdDevice?: HotschedulesToast.orders.Device;
    lastModifiedDevice?: HotschedulesToast.orders.Device;
    /**
     * The total currency amount withheld as repayment for a
     * Toast Capital merchant cash advance (MCA). The MCA
     * repayment amount is set at the time the payment is
     * captured, which is typically hours after the actual
     * restaurant guest payment.
     * Until the `mcaRepaymentAmount`
     * is set, this value is `null`.
     * The `mcaRepaymentAmount`
     * _might_ be updated when the payment is settled, which is
     * typically one or more days after the actual guest
     * payment. Response only.
     *
     */
    mcaRepaymentAmount?: number;
    /**
     * **Note:** this value is in limited release. Your orders API
     * integration might not include the `cardPaymentId` value.
     * A unique identifier for the credit card used for a
     * `CREDIT` type payment. The identifier string is generated
     * by the Toast platform and _does not include any
     * information related to or associated with the actual
     * credit card account._ The identifier is unique within
     * your restaurant management group.
     * The value is `null` for the following payment types:
     * * Payment types other than `CREDIT`
     * * Credit card payments entered using EMV (chip cards)
     * * Credit card payments entered by keying in card numbers
     * Response only.
     *
     */
    cardPaymentId?: string;
    paymentCardToken?: HotschedulesToast.orders.ToastReference;
    giftCard?: HotschedulesToast.orders.ExternalReference;
    giftCardInfo?: HotschedulesToast.orders.GiftCardInfo;
    /** The Toast platform identifier for the order that contains the payment. Response only. */
    orderGuid?: string;
    /** The Toast platform identifier for the check that contains the payment. Response only. */
    checkGuid?: string;
    /** For internal use only. */
    receiptToken?: string;
    /** For internal use only. */
    cardHolderFirstName?: string;
    /** For internal use only. */
    cardHolderLastName?: string;
    /**
     * For internal use only.
     *
     */
    isProcessedOffline?: boolean;
    /** For internal use only. */
    processingService?: string;
    /** For internal use only. */
    authorizedAmount?: number;
    /** For internal use only. */
    cardTenderType?: string;
    /** For internal use only. */
    prepaidCardBalance?: number;
    /** For internal use only. */
    proRatedDiscountAmount?: number;
    /** For internal use only. */
    proRatedTaxAmount?: number;
    /** For internal use only. */
    proRatedTotalServiceChargeAmount?: number;
    shift?: HotschedulesToast.orders.ExternalReference;
    serverShift?: HotschedulesToast.orders.ExternalReference;
    /** For internal use only. */
    orderOwnerGuid?: string;
}

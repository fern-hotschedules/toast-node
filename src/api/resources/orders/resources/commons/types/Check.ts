/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HotschedulesToast } from "@fern-api/toast";

/**
 * Represents a single check within an order.
 */
export interface Check extends HotschedulesToast.orders.ExternalReference {
    /** The date and time that the Toast platform received the check. */
    createdDate?: string;
    /** The date on which this check was opened. If not specified, it is set to the current system time. */
    openedDate?: string;
    /** The most recent date on which this check's payment status was set to `CLOSED`. */
    closedDate?: string;
    /** The most recent date on which this check was modified. */
    modifiedDate?: string;
    /**
     * The date on which this check was deleted. `deletedDate` is only applicable when `deleted` is true. If `deleted` is false, then `deletedDate` is set to the UNIX epoch, `1970-01-01T00:00:00.000+0000`.
     *
     */
    deletedDate?: string;
    /** Set to `true` if this check was deleted. */
    deleted?: boolean;
    selections: HotschedulesToast.orders.Selection[];
    customer?: HotschedulesToast.orders.Customer;
    appliedLoyaltyInfo?: HotschedulesToast.orders.AppliedLoyaltyInfo;
    /** Set to `true` if this check is tax exempt. The tax exempt number is not yet supported. */
    taxExempt?: boolean;
    /** Generally starts at one each day and counts up. The Toast platform fills this in if it is not specified when the order is POSTed. Not guaranteed to be unique. */
    displayNumber?: string;
    /** Any restaurant-configured service charges that applied to this check. */
    appliedServiceCharges?: HotschedulesToast.orders.AppliedServiceCharge[];
    /** The total calculated price of this check after discounts. Does not include taxes. Response only. */
    amount?: number;
    /** For internal use only. */
    netAmount?: number;
    /** The calculated tax amount. Includes service charge and item level taxes. Response only. */
    taxAmount?: number;
    /** For internal use only. */
    tipAmount?: number;
    /** The total calculated price of this check including discounts and taxes. Not affected by refunds. Response only. */
    totalAmount?: number;
    /** For internal use only. */
    totalDiscountAmount?: number;
    /** Payments made on this check. */
    payments?: HotschedulesToast.orders.Payment[];
    /**
     * The name of the tab on this check. This displays on the KDS (Kitchen Display System) for pending orders. The `tabName` value can contain up to 255 characters.
     *
     */
    tabName?: string;
    /**
     * The payment status of this check. Valid values: * `OPEN` - There is an outstanding balance. * `PAID` - A credit card payment was applied, but the tip has not been adjusted. * `CLOSED`  - There is no remaining amount due on this check. For credit card payments, the payment has been adjusted to reflect the tip. Toast does not prevent a `CLOSED` check from transitioning back to `OPEN` or `PAID`. Response only.
     *
     */
    paymentStatus?: HotschedulesToast.orders.CheckPaymentStatus;
    /** The discounts applied to this check. In a `POST` request, only one `appliedDiscount` is allowed per check. */
    appliedDiscounts?: HotschedulesToast.orders.AppliedDiscount[];
    /** True if this check is voided. Response only. */
    voided?: boolean;
    /** The date when this check was voided. Response only. */
    voidDate?: string;
    /** The business date (yyyyMMdd) on which this check was voided. Response only. */
    voidBusinessDate?: number;
    /** The most recent date when this check received payment. If not specified when `POST`ing, it is set to the current system time. */
    paidDate?: string;
    /** For internal use only. */
    pickedUpDate?: string;
    createdDevice?: HotschedulesToast.orders.Device;
    lastModifiedDevice?: HotschedulesToast.orders.Device;
    appliedPreauthInfo?: HotschedulesToast.orders.AppliedPreauthInfo;
    shift?: HotschedulesToast.orders.ExternalReference;
    driverShift?: HotschedulesToast.orders.ExternalReference;
    /** For internal use only. */
    removedSelections?: HotschedulesToast.orders.RemovedSelection[];
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HotschedulesToast } from "@fern-api/toast";

/**
 * Information about a menu group configured for this restaurant, including an array of menu items contained in the group.
 *
 */
export interface MenuGroup {
    /**
     * A descriptive name for this menu group, for example, "Appetizers" or "Sandwiches".
     *
     */
    name?: string;
    /**
     * A unique identifier for this menu group, assigned by the Toast POS system.
     *
     */
    guid?: string;
    /**
     * An identifier that is used to identify and consolidate menu entities that are versions of each other. `multiLocationId` replaces `masterId`. `multiLocationId` and `masterId` always have the same value. Menu entities can be versioned. Those versions can be assigned to specific restaurant locations, or groups of locations, in a management group. For example, you could have two versions of a burger, one for a Boston location and another for a New York City location. Versioned menu entities share the majority of, but not all of, their data. For example, the Boston version is called the Minuteman Burger and has pickles, while the New York City version is called the Empire Burger and does not. You use the `multiLocationId` to identify menu entities that are versions of each other. To continue the example above, the Minuteman Burger in the JSON returned for the Boston location has the same `multilocationId` as the Empire Burger in the JSON returned for the New York City location. These matching `multlocationId` values indicate that the two items are related versions of the same item. In Toast reports, this allows a restaurant to track sales of the burger across both locations. The Toast POS system ensures that once a `multilocationId` value is assigned to a set of versions within a management group, that `multiLocationId` is not used for any other version sets in the same management group. It does not guarantee, however, that the `multiLocationId` is not used by another management group to identify a set of versions within it. For detailed information on the enterprise module and versioning, see <a href="https://doc.toasttab.com/doc/platformguide/sharingMenusAndOtherInformationAmongRestaurants.html">Enterprise module overview</a> in the Toast Platform Guide.
     *
     */
    multiLocationId?: string;
    /**
     * This value is deprecated. Instead of `masterId`, use `multiLocationId`. An identifier that is used to identify and consolidate menu entities that are versions of each other.
     *
     */
    masterId?: number;
    /**
     * An optional short description of this menu group.
     *
     */
    description?: string;
    /**
     * The URL to an image that has been uploaded for this menu entity. This value is null if no image has been specified.
     *
     */
    image?: string;
    /**
     * An array of strings that indicate where this menu entity is visible: * POS: The menu entity is visible in the Toast POS app.  * KIOSK: The menu entity is visible on a Toast kiosk.  * TOAST_ONLINE_ORDERING: The menu entity is visible in the Toast online
     *   ordering site for this restaurant.
     * * ORDERING_PARTNERS: The restaurants wants this menu entity to be visible
     *   on online ordering sites that integrate with the Toast POS system using the orders API.
     * * GRUBHUB: Deprecated. The menu entity is included during a menu sync to
     *   Grubhub and will be visible on the Grubhub online ordering service after a
     *   menu sync has completed. _Note:_ Conceptually, the _Grubhub_ configuration
     *   option that was associated with the `GRUBHUB` string in this array has
     *   been replaced by the more general _Online orders: Ordering partners_
     *   configuration option and restaurants that used the _Grubhub_ option have
     *   been automatically migrated to the new _Online orders: Ordering partners_
     *   option. This means that any menu entity that had the _Grubhub_ option set
     *   to _Yes_ will now have the _Online orders: Ordering partners_ option
     *   enabled and the `ORDERING_PARTNERS` enum will be present in the
     *   `visibility` array for it. To support backwards compatibility, the
     *   `visibility` array for these entities will also continue to contain the
     *   `GRUBHUB` enum for a short period of time. See <a
     *   href="https://doc.toasttab.com/doc/devguide/apiDeprecatedApiFunctions.html#apiMenuEntityVisibilityEnhancements">Menu
     *   Visibility Enhancements (Rolled Out)</a> for more information.
     * The `visibility` array is empty if the menu entity is not configured to be visible for any of the use cases listed above.
     *
     */
    visibility?: HotschedulesToast.menus.MenuEntityVisibility[];
    /**
     * An array of `ItemTag` objects that are assigned to this menu group. Item tags are used to assign identifying characteristics, for example, vegetarian, gluten-free, or alcohol.
     *
     */
    itemTags?: HotschedulesToast.menus.ItemTag[];
    /**
     * An array of the `MenuGroup` objects that are children of this menu group. The array is empty if the menu group has no child menu groups.
     *
     */
    menuGroups?: HotschedulesToast.menus.MenuGroup[];
    /**
     * An array of the `MenuItem` objects contained in this menu group.
     *
     */
    menuItems?: HotschedulesToast.menus.MenuItem[];
}
